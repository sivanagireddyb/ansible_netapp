- hosts: localhost
  gather_facts: true
  vars:
    input: &input
      hostname:       "192.168.64.130"
      username:       "admin"
      password:       "netapp123"
      https:          true
      validate_certs: false
    volume_name: "myvol2"
    owning_vserver_uuid: "f1750b57-dae5-11ec-ab29-000c29386da9"
  collections:
    - netapp.ontap

  tasks:  
  - name: Get Ontap volume Info
    na_ontap_info:
      <<: *input  
      state: info
      gather_subset:
        - volume_info
      query:
        volume-attributes:
          volume-id-attributes:
            name: "{{ volume_name }}"
            owning-vserver-uuid: "{{ owning_vserver_uuid }}"
          volume-state-attributes:
            state: online
      desired_attributes:
        volume-attributes:
          volume-space-attributes:
            filesystem-size:
            size-total:
            percentage-size-used:
          volume-id-attributes:
            aggr-list:
              aggr-name:
    register: netapp

  - set_fact: 
      aggr_name: "{{ netapp.ontap_info.volume_info[item].volume_id_attributes.aggr_list.aggr_name }}"
    with_items:
      "{{ netapp.ontap_info.volume_info }}"

  - name: run ontap info module for aggregate module, requesting specific fields
    na_ontap_info:
      <<: *input  
      state: info
      gather_subset: aggregate_info
      query:
        aggr-attributes:
#          aggregate-name: "{{ netapp.ontap_info.volume_info[item].volume_id_attributes.aggr_list.aggr_name }}"
          aggregate-name: "{{ aggr_name }}"
      desired_attributes:
        aggr-attributes:
          aggr-space-attributes:
            physical-used-percent:
#    with_items:
#      "{{ netapp.ontap_info.volume_info }}"
    register: ontap_agginfo

  - set_fact:
      used_size: "{{ netapp.ontap_info.volume_info[item].volume_space_attributes.percentage_size_used }}"
      vserver_name: "{{ netapp.ontap_info.volume_info[item].volume_id_attributes.owning_vserver_name }}"
      vol_name: "{{ netapp.ontap_info.volume_info[item].volume_id_attributes.name }}"
      total_size: "{{ netapp.ontap_info.volume_info[item].volume_space_attributes.size_total }}"
    with_items:
      "{{ netapp.ontap_info.volume_info }}"
  - set_fact:
      aggr_per_used: "{{ ontap_agginfo.ontap_info.aggregate_info[item].aggr_space_attributes.physical_used_percent }}"
    with_items:
      "{{ ontap_agginfo.ontap_info.aggregate_info }}"

  - name: Print volume details
    debug:
      msg:
        - "Vserver:             {{ verser_name }}"
        - "Name:                {{ vol_name }}"
        - "Total_Size:          {{ total_size }}"
        - "Used_Per:            {{ used_size }}"
        - "Aggr_Per_Used:       {{ aggr_per_used }}"

  - name: Prevalidate usage percentage
    block:
      - set_fact:
          precheck_status: "Pass"  
        when: 
           - used_size|int >= 90
           - aggr_per_used|int < 90
      - set_fact:
          precheck_status: "Fail"  
        when: 
           - used_size|int <= 90 or aggr_per_used|int >= 90
  - debug: var=precheck_status
  
  - name: Notify after precheck
    debug:
      msg: "Passed test"
    when: precheck_status == "Pass"


  - name: Increase Vol Size
    block:
      - name: Create log file
        file:
          path: "/tmp/{{vol_name}}_{{ansible_date_time.date}}.log"
          state: touch
  
      - name: Fetch number of lines from log file
        slurp:
          src: "/tmp/{{vol_name}}_{{ansible_date_time.date}}.log"
        register: log_file
  
      - name: Store count in varibale increased_count
        set_fact:
          increased_count: "{{ (log_file.content | b64decode).splitlines() | length }}"
  
      - debug:
          msg: "Number of times already incremented today: {{ increased_count }}"
  
      - name: Increse size
        na_ontap_volume:
          state: present
          name: "{{ vol_name }}"
          aggregate_name: "{{ aggr_name }}"
          size: "{{ total_size + total_size * 0.1 }}"
          size_unit: bytes
          vserver: "{{ vserver_name }}"
          wait_for_completion: True
          comment: ansible increased size
        register: vol_increase_op
        when:
          - increased_count|int < 3 

      - debug: var=increased_count

      - name: Update log file when expansion is sucessfull
        lineinfile:
          path: "/tmp/{{vol_name}}_{{ansible_date_time.date}}.log"
          line: "{{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }} {{ expansion_status }} {{ vol_name }}" 
        when: 
          - vol_increase_op.stdout.status == "Success"
  
      - debug:
          msg: "Increase volume task Failed"
        when:
          - vol_increase_op.stdout.status != "Success"
    when:
      - precheck_status == "Pass"